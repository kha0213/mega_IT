--SCOTT이 근무하는 부서이름

SELECT DNAME FROM EMP E,DEPT D WHERE E.DEPTNO=D.DEPTNO AND ENAME='SCOTT';
SELECT DNAME 
    FROM DEPT 
    WHERE DEPTNO=(SELECT DEPTNO FROM EMP WHERE ENAME='SCOTT');  --서브쿼리 먼저 무조건 실행되어야함
-- 실행결과 1줄 -> 단일행 서브쿼리, 여러줄 -> 다중행 서브쿼리
-- 서브쿼리의 종류 : 단일행 서브쿼리, 다중행 서브쿼리
-- JOBDL 'MANAGER'인 사람의 부서 이름
SELECT DEPTNO FROM EMP WHERE JOB='MANAGER'; --서브쿼리
SELECT DNAME FROM DEPT 
    WHERE DEPTNO IN (SELECT DEPTNO FROM EMP WHERE JOB IN'MANAGER'); --실행안됨 다중행 서브쿼리 = ->IN 으로 변경
SELECT DNAME FROM DEPT
    WHERE DEPTNO IN(10,20,30);

--단일행 서브쿼리
SELECT MAX(SAL) FROM EMP;
SELECT ENAME, SAL FROM EMP
    WHERE SAL=(SELECT MAX(SAL) FROM EMP); --이름과 최고 금액 셀
--SCOTT과 같은 부서에 근무하는 사람들 이름
SELECT ENAME FROM EMP 
    WHERE ENAME!='SCOTT' AND DEPTNO=(SELECT DEPTNO FROM EMP WHERE ENAME='SCOTT'); --서브쿼리
SELECT E.ENAME FROM EMP E, EMP W
    WHERE W.ENAME='SCOTT' AND W.DEPTNO=E.DEPTNO AND E.ENAME != 'SCOTT'; --셀프조인
--SCOTT과 같은 근무지에 근무하는 사람들 이름
INSERT INTO DEPT VALUES (50, 'IT', 'DALLAS');
SELECT * FROM DEPT;
INSERT INTO EMP VALUES (9999,'홍길동',NULL,NULL,NULL,9000,NULL,50);
SELECT * FROM EMP;
SELECT ENAME FROM EMP E, DEPT D
    WHERE E.DEPTNO=D.DEPTNO AND 
    D.LOC=(SELECT LOC FROM EMP E, DEPT D WHERE E.DEPTNO=D.DEPTNO AND ENAME='SCOTT') AND
    ENAME<>'SCOTT';
ROLLBACK; -- INSERT 취소

--SCOTT 과 같은 JOB을 가진 사원들의 모든 정보 출력
SELECT * FROM EMP WHERE JOB=(SELECT JOB FROM EMP WHERE ENAME='SCOTT') AND ENAME != 'SCOTT';
--SCOTT 과 급여가 동일하거나 더 많이 받는 사원이름과 급여 출력
SELECT ENAME, SAL FROM EMP WHERE SAL>=(SELECT SAL FROM EMP WHERE ENAME='SCOTT') AND ENAME ^= 'SCOTT';
--직속상관이 KING인 사원의 이름과 급여
SELECT ENAME, SAL FROM EMP WHERE MGR = (SELECT EMPNO FROM EMP WHERE ENAME = 'KING'); -- 서브쿼리~
SELECT E.ENAME, E.SAL FROM EMP E, EMP W
    WHERE E.MGR=W.EMPNO AND W.ENAME='KING';
--평균 급여 이하를 받는 직원의 사번, 이름, 급여
SELECT EMPNO, ENAME, SAL FROM EMP WHERE SAL<=(SELECT AVG(SAL) FROM EMP);
--부서번호, 부서별 최대급여, 그 최대급여를 받는 사람의 이름, 그사람의 급여
SELECT DEPTNO, MAX(SAL) FROM EMP GROUP BY DEPTNO;
SELECT DEPTNO, SAL, ENAME FROM EMP 
    WHERE (DEPTNO, SAL) IN (SELECT DEPTNO, MAX(SAL) FROM EMP GROUP BY DEPTNO); --다중행 서브쿼리
--단일행 다중열 서브쿼리 SCOTT과 JOB도 같고 부서번호도 같은 사람의 모든 필드
SELECT * FROM EMP 
    WHERE (JOB, DEPTNO) = (SELECT JOB, DEPTNO FROM EMP WHERE ENAME='SCOTT');

--★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

--다중행 서브쿼리 : 서브쿼리의 실행결과가 다중행일 때 연산자 IN, NOT IN, ANY=SOME, ALL, EXISTS 로 써야한다.
--부서번호, DEPTNO(부서번호)별 최대급여, 최대급여 받는 사람의 이름
SELECT DEPTNO, SAL, ENAME FROM EMP
    WHERE (DEPTNO,SAL) IN 
    (SELECT DEPTNO, MAX(SAL) FROM EMP GROUP BY DEPTNO);

-- IN ; (EX) 급여가 3000 이상 받는 사원이 소속된 부서(10번, 20번)와 동일한 부서에서 근무하는 사원들의 모든 정보를 출력하는 SQL문
SELECT * FROM EMP WHERE DEPTNO IN (SELECT DEPTNO FROM EMP WHERE SAL>=3000);

--입사년도, 최소급여, 입사년 별 최소급여를 받는 사람
SELECT TO_CHAR(HIREDATE,'YY') H_YEAR, SAL, ENAME FROM EMP
    WHERE (TO_CHAR(HIREDATE,'YY'), SAL) IN 
        (SELECT TO_CHAR(HIREDATE,'YY'), MIN(SAL) FROM EMP GROUP BY  TO_CHAR(HIREDATE,'YY'))
        ORDER BY H_YEAR;
SELECT SUBSTR(EXTRACT(YEAR FROM HIREDATE),3,2), MIN(SAL) FROM EMP GROUP BY SUBSTR(EXTRACT(YEAR FROM HIREDATE),3,2);

--	부서별로 입사일이 가장 늦은 사람이 부서번호, 이름, 입사일을 출력하시오
SELECT DEPTNO, ENAME, HIREDATE FROM EMP
    WHERE (DEPTNO,HIREDATE) IN 
        (SELECT DEPTNO, MAX(HIREDATE) FROM EMP GROUP BY DEPTNO);
--	JOB(직책별)로 가장 낮은 연봉을 받는 사람의 이름, 직책, 연봉을 출력
SELECT ENAME, JOB, SAL FROM EMP
    WHERE (JOB,SAL) IN (SELECT JOB, MIN(SAL) FROM EMP GROUP BY JOB)
    ORDER BY SAL;

--	ALL (EX) 30번 소속 사원들 중에서 급여를 가장 많이 받는 사원보다 더 많은 급여를 받는 사람의 이름, 급여를 출력하는 SQL문
SELECT ENAME, SAL FROM EMP WHERE SAL>(SELECT MAX(SAL) FROM EMP WHERE DEPTNO=30);
SELECT ENAME, SAL FROM EMP WHERE SAL > ALL(SELECT SAL FROM EMP WHERE DEPTNO=30);  -- SELECT SAL SAL FROM EMP WHERE DEPTNO=30; 의 모든값보다 큼을 의미


-- ANY (EX) 부서번호가 30번인 사원들의 급여 중 가장 작은 값(950)보다 많은 급여를 받는 사원의 이름, 급여를 출력하는 SQL문
SELECT ENAME, SAL FROM EMP 
    WHERE SAL>ANY(SELECT SAL FROM EMP WHERE DEPTNO=30)
    ORDER BY SAL;
SELECT ENAME, SAL FROM EMP 
    WHERE SAL>(SELECT MIN(SAL) FROM EMP WHERE DEPTNO=30)
    ORDER BY SAL;
--	EXISTS : SQL문에서 Exists를 사용하는 것은 어떤 조건을 만족하는 집합의 존재 여부를 확인할 경우에 사용 
--(EX) 직속부하가 있는 사원의 사원번호, 이름, 급여를 출력
SELECT EMPNO, ENAME, SAL FROM EMP
    WHERE EMPNO IN (SELECT MGR FROM EMP)
    ORDER BY SAL;
SELECT DISTINCT M.EMPNO, M.ENAME, M.SAL FROM EMP M, EMP W
    WHERE M.EMPNO=W.MGR
    ORDER BY SAL;
--직속부하가 없는 사원 뿌려라
SELECT * FROM EMP E
    WHERE NOT EXISTS(SELECT MGR FROM EMP WHERE MGR=E.EMPNO); --EXISTS
SELECT * FROM EMP E
    WHERE EMPNO NOT IN (SELECT NVL(MGR, 0) FROM EMP); -- NULL 이 있을 땐 IN 연산자 앞에 NOT을 붙이는 걸 조심해라~~~~~~~~~
SELECT * FROM EMP E
    WHERE EMPNO NOT IN (SELECT MGR FROM EMP WHERE MGR IS NOT NULL);
SELECT * FROM EMP E
    WHERE EMPNO IN (SELECT MGR FROM EMP); 
SELECT W.* FROM EMP M, EMP W
    WHERE M.MGR(+)=W.EMPNO AND M.ENAME IS NULL; --SELF JOIN+OUTER JOIN
--MANAGER 가 없는 사원 뿌림
SELECT EMPNO, ENAME, MGR FROM EMP WORKER
    WHERE EXISTS (SELECT EMPNO FROM EMP WHERE WORKER.MGR=EMPNO);
    
SELECT empno, ename, sal FROM EMP manager
    WHERE EXISTS (SELECT empno FROM EMP worker WHERE manager.empno=worker.mgr);
    
SELECT EMPNO, ENAME, SAL FROM EMP MANAGER
    WHERE EXISTS (SELECT EMPNO FROM EMP WHERE MGR=MANAGER.EMPNO);
--사번, 이름, 부서번호, SAL, 해당직원부서 평균(SELECT절에 SUBQUERY)
SELECT EMPNO, ENAME, DEPTNO, SAL, (SELECT ROUND(AVG(SAL)) FROM EMP WHERE DEPTNO=E.DEPTNO) "해당부서평균"
    FROM EMP E
    ORDER BY SAL;





--탄탄다지기이이이이~
--	부서별로 가장 급여를 많이 받는 사원의 정보(사원 번호, 사원이름, 급여, 부서번호)를 출력(IN 연산자 이용)
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP
    WHERE (DEPTNO,SAL) IN (SELECT DEPTNO, MAX(SAL) FROM EMP GROUP BY DEPTNO);
--	직급(JOB)이 MANAGER인 사람의 속한 부서의 부서 번호와 부서명과 지역을 출력(IN)
SELECT E.DEPTNO, DNAME, LOC FROM DEPT D, EMP E
    WHERE D.DEPTNO=E.DEPTNO AND JOB='MANAGER';
--	연봉이 1500이상인 사람들 중 연봉 등급을 나누어서 해당 등급별 최고 연봉을 받는 사람들의 사번, 이름, 직업, 입사일, 급여, 급여등급을 출력
SELECT EMPNO, ENAME, JOB, HIREDATE, SAL, GRADE FROM EMP, SALGRADE
    WHERE SAL BETWEEN LOSAL AND HISAL AND (SAL, GRADE) IN 
        (SELECT MAX(SAL), GRADE FROM EMP, SALGRADE
        WHERE SAL BETWEEN LOSAL AND HISAL AND SAL>=1500
        GROUP BY GRADE)
    ORDER BY SAL;
--	응용심화 : 입사일 분기별로 가장 높은 연봉을 받는 사람들의 분기, 사번, 이름, JOB, 상사사번, 입사일, 급여, 상여를 출력하세요
SELECT TO_CHAR(HIREDATE, 'MM') "입사분기", EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, NVL(COMM,0)
    FROM EMP
    WHERE (TO_CHAR(HIREDATE, 'MM'), SAL) IN 
        (SELECT TO_CHAR(HIREDATE, 'MM'), MAX(SAL) FROM EMP GROUP BY TO_CHAR(HIREDATE, 'MM')) 
    ORDER BY 입사분기;
SELECT DECODE(CEIL(TO_NUMBER(TO_CHAR(HIREDATE, 'MM'))/3), 1, '1', 2, '2', 3, '3', 4, '4') "분기", 
       EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, NVL(COMM,0)
    FROM EMP
    WHERE (DECODE(CEIL(TO_NUMBER(TO_CHAR(HIREDATE, 'MM'))/3), 1, '1분기', 2, '2분기', 3, '3분기', 4, '4분기'),SAL) IN 
        (SELECT DECODE(CEIL(TO_NUMBER(TO_CHAR(HIREDATE, 'MM'))/3), 1, '1분기', 2, '2분기', 3, '3분기', 4, '4분기') , MAX(SAL) 
             FROM EMP GROUP BY  DECODE(CEIL(TO_NUMBER(TO_CHAR(HIREDATE, 'MM'))/3), 1, '1분기', 2, '2분기', 3, '3분기', 4, '4분기'))
    ORDER BY 분기;
    

SELECT CEIL(EXTRACT(MONTH FROM HIREDATE)/3) "분기", MAX(SAL) FROM EMP GROUP BY CEIL(EXTRACT(MONTH FROM HIREDATE)/3);
SELECT CEIL(EXTRACT(MONTH FROM HIREDATE)/3) "분기", EMPNO, ENAME, JOB, MGR, HIREDATE, SAL ,NVL(COMM,0) FROM EMP
    WHERE (CEIL(EXTRACT(MONTH FROM HIREDATE)/3),SAL) IN 
    (SELECT CEIL(EXTRACT(MONTH FROM HIREDATE)/3) "분기", MAX(SAL) FROM EMP GROUP BY CEIL(EXTRACT(MONTH FROM HIREDATE)/3))
    ORDER BY 분기;
--    WHERE TO_CHAR(HIREDATE, 'MM') BETWEEN '01' AND '03';
--	SALESMAN 모든 사원들 보다 급여를 많이 받는 사원들의 이름과 급여와 직급(담당 업무)를 출력하되 영업 사원은 출력하지 않는다.(ALL이용)
SELECT ENAME, SAL, JOB FROM EMP
    WHERE SAL>ALL(SELECT SAL FROM EMP WHERE JOB='SALESMAN');
--	SALESMAN 일부 어떤 한 사원보다 급여를 많이 받는 사원들의 이름과 급여와 직급(담당 업무)를 출력하되 영업 사원을 포함해서 출력(ANY)
SELECT ENAME, SAL, JOB FROM EMP
    WHERE SAL > ANY(SELECT SAL FROM EMP WHERE JOB='SALESMAN') OR JOB='SALESMAN';
--	연봉이 3000미만인 사람 중에 가장 최근에 입사한 사람의 사원번호와 이름, 연봉, 입사일을 출력
SELECT EMPNO, ENAME, SAL, HIREDATE FROM EMP
    WHERE HIREDATE = (SELECT MAX(HIREDATE) FROM EMP WHERE SAL<3000);
--	직급이 ‘SALESMAN’인 사원이 받는 급여의 최소 급여보다 많이 받는 사원들의 이름, 급여, 직급, 부서번호를 출력하되 부서번호가 20번인 사원은 제외한다(ANY 연산자 이용)
SELECT ENAME, SAL, JOB, DEPTNO FROM EMP
    WHERE DEPTNO!=20 AND SAL > ANY (SELECT SAL FROM EMP WHERE JOB = 'SALESMAN');



-- (4).	셤 연습문제
-- 1. 사원테이블에서 가장 먼저 입사한 사람의 이름, 급여, 입사일
SELECT ENAME, SAL, HIREDATE FROM EMP
    WHERE HIREDATE=(SELECT MIN(HIREDATE) FROM EMP);
-- 2. 회사에서 가장 급여가 적은 사람의 이름, 급여
SELECT ENAME, SAL FROM EMP
    WHERE SAL=(SELECT MIN(SAL) FROM EMP);
-- 3. 회사 평균보다 급여를 많이 받는 사람의 이름, 급여, 부서코드
SELECT ENAME, SAL, DEPTNO FROM EMP
    WHERE SAL>(SELECT AVG(SAL) FROM EMP);
-- 4. 회사 평균 이하의 급여를 받는 사람의 이름, 급여, 부서명
SELECT ENAME, SAL, DNAME FROM EMP E, DEPT D
    WHERE E.DEPTNO=D.DEPTNO AND SAL<=(SELECT AVG(SAL) FROM EMP);
-- 5. SCOTT보다 먼저 입사한 사람의 이름, 급여, 입사일, 급여 등급
SELECT ENAME,SAL,HIREDATE, GRADE FROM EMP E,SALGRADE
    WHERE SAL BETWEEN LOSAL AND HISAL
        AND HIREDATE<(SELECT HIREDATE FROM EMP WHERE ENAME='SCOTT');

-- 6. 5번에 부서명 추가하고 급여가 큰 순 정렬
SELECT ENAME,SAL,HIREDATE, GRADE, DNAME FROM EMP E,DEPT D, SALGRADE
    WHERE E.DEPTNO=D.DEPTNO AND SAL BETWEEN LOSAL AND HISAL
        AND HIREDATE<(SELECT HIREDATE FROM EMP WHERE ENAME='SCOTT')
        ORDER BY SAL DESC;
-- 7. 사원테이블에서 BLAKE 보다 급여가 많은 사원들의 사번, 이름, 급여를 검색
SELECT EMPNO, ENAME, SAL FROM EMP
    WHERE SAL>(SELECT SAL FROM EMP WHERE ENAME= 'BLAKE');
-- 8. 사원테이블에서 MILLER보다 늦게 입사한 사원의 사번, 이름, 입사일을 검색하시오
SELECT EMPNO, ENAME, HIREDATE FROM EMP
    WHERE HIREDATE>(SELECT HIREDATE FROM EMP WHERE ENAME = 'MILLER');
-- 9. 사원테이블에서 사원전체 평균 급여보다 급여가 많은 사원들의 사번, 이름, 급여를 검색
SELECT EMPNO,ENAME,SAL FROM EMP
    WHERE SAL>(SELECT AVG(SAL) FROM EMP);
-- 10. 사원테이블에서 CLARK와 같은 부서며, 사번이 7698인 직원의 급여보다 많은 급여를 받는 사원들의 사번, 이름, 급여 검색
SELECT EMPNO,ENAME,SAL FROM EMP
    WHERE DEPTNO=(SELECT DEPTNO FROM EMP WHERE ENAME='CLARK') AND SAL>(SELECT SAL FROM EMP WHERE EMPNO=7698);
-- 11. 응용심화. 사원테이블에서 CLARK와 같은 부서명이며, 사번이 7698인 직원의 급여보다 많은 급여를 받는 사원들의 사번, 이름, 급여 검색
SELECT DNAME,EMPNO,ENAME,SAL FROM EMP E, DEPT D
    WHERE E.DEPTNO=D.DEPTNO AND DNAME =(SELECT DNAME FROM EMP E, DEPT D WHERE E.DEPTNO=D.DEPTNO AND ENAME='CLARK')
        AND SAL>(SELECT SAL FROM EMP WHERE EMPNO=7698);
-- 12. 사원 테이블에서 BLAKE와 같은 부서에 있는 모든 사원의 이름과 입사일자를 출력하는 SELECT문을 작성하시오.
SELECT ENAME,HIREDATE FROM EMP
    WHERE DEPTNO=(SELECT DEPTNO FROM EMP WHERE ENAME='BLAKE') AND ENAME!='BLAKE';
-- 13. 사원 테이블에서 평균 급여 이상을 받는 모든 종업원에 대해서 종업원 번호와 이름을 출력하는 SELECT문을 작성하시오. (단 급여가 많은 순으로 출력하여라.)
SELECT EMPNO, ENAME FROM EMP
    WHERE SAL>=(SELECT AVG(SAL) FROM EMP)
    ORDER BY SAL DESC;
--여기까지 단일행

-- 14. 사원 테이블에서 이름에 “T”가 있는 사원이 근무하는 부서에서 근무하는 모든 종업원에 대해 사원 번호,이름,급여를 출력하는 SELECT문을 작성하시오. 단 사원번호 순으로 출력하여라.
SELECT EMPNO, ENAME, SAL FROM EMP
    WHERE DEPTNO IN (SELECT DEPTNO FROM EMP WHERE ENAME LIKE '%I%');
-- 15. 사원 테이블에서 부서 위치가 Dallas인 모든 종업원에 대해 이름,업무,급여를 출력하는 SELECT문을 작성하시오.
SELECT ENAME,JOB,SAL FROM EMP E, DEPT D
    WHERE E.DEPTNO=D.DEPTNO AND LOC='DALLAS';
SELECT ENAME, JOB, SAL FROM EMP E
    WHERE DEPTNO=(SELECT DEPTNO FROM DEPT WHERE LOC='DALLAS'); 
-- 16. EMP 테이블에서 King에게 보고하는 모든 사원의 이름과 급여를 출력하는 SELECT문을 작성하시오.
SELECT E.ENAME, E.SAL FROM EMP E, EMP W
    WHERE E.MGR=W.EMPNO AND W.ENAME = 'KING';
SELECT ENAME, SAL FROM EMP
    WHERE MGR=(SELECT EMPNO FROM EMP WHERE ENAME='KING');
-- 17. 사원 테이블에서 SALES부서 사원의 이름,업무를 출력하는 SELECT문을 작성하시오.
SELECT ENAME, JOB FROM EMP
    WHERE DEPTNO=(SELECT DEPTNO FROM DEPT WHERE DNAME='SALES');
SELECT ENAME,JOB FROM EMP E, DEPT D
    WHERE E.DEPTNO=D.DEPTNO AND DNAME='SALES';
-- 18. 사원 테이블에서 월급이 부서 30의 최저 월급보다 높은 사원을 출력하는 SELECT문을 작성하시오.
SELECT ENAME, SAL FROM EMP
    WHERE SAL>(SELECT MIN(SAL) FROM EMP WHERE DEPTNO=30);
-- 19. 사원 테이블에서 부서 10에서 부서 30의 사원과 같은 업무를 맡고 있는 사원의 이름과 업무를 출력하는 SELECT문을 작성하시오.
SELECT ENAME, JOB FROM EMP
    WHERE DEPTNO=10 AND JOB IN (SELECT JOB FROM EMP WHERE DEPTNO=30);
-- 20. 사원 테이블에서 FORD와 업무도 월급도 같은 사원의 모든 정보를 출력하는 SELECT문을 작성하시오.
SELECT * FROM EMP
    WHERE (JOB, SAL) IN (SELECT JOB,SAL FROM EMP WHERE ENAME='FORD') AND ENAME!='FORD';

-- 21. 사원 테이블에서 이름이 JONES인 직원의 JOB과 같거나 월급이 FORD이상인 사원의 정보를 이름,업무,부서번호,급여를 출력하는 SELECT문을 작성. 단, 업무별 알파벳 순, 월급이 많은 순으로 출력하여라.
SELECT ENAME, JOB, DEPTNO, SAL FROM EMP
    WHERE SAL>=(SELECT SAL FROM EMP WHERE ENAME='FORD') OR JOB=(SELECT JOB FROM EMP WHERE ENAME='JONES');

-- 22. 사원 테이블에서 SCOTT 또는 WARD와 월급이 같은 사원의 정보를 이름,업무,급여를 출력하는 SELECT문을 작성하시오.
SELECT ENAME, JOB, SAL FROM EMP
    WHERE SAL IN (SELECT SAL FROM EMP WHERE ENAME='SCOTT' OR ENAME='WARD');
-- 23. 사원 테이블에서 CHICAGO에서 근무하는 사원과 같은 업무를 하는 사원들의 이름,업무를 출력하는 SELECT문을 작성하시오.
SELECT ENAME, JOB FROM EMP
    WHERE JOB IN (SELECT DISTINCT JOB FROM EMP E, DEPT D WHERE E.DEPTNO=D.DEPTNO AND LOC='CHICAGO');

-- 24. 사원 테이블에서 부서별로 월급이 평균 월급보다 높은 사원을 사원번호,이름,급여를 출력하는 SELECT문을 작성하시오.
SELECT EMPNO, ENAME, SAL
    FROM EMP E 
    WHERE SAL>(SELECT AVG(SAL) FROM EMP WHERE DEPTNO=E.DEPTNO)
    ORDER BY SAL;
    
-- 25. 사원 테이블에서 업무별로 월급이 평균 월급보다 낮은 사원을 부서번호,이름,급여를 출력하는 SELECT문을 작성하시오.
SELECT DEPTNO, ENAME, SAL FROM EMP E
    WHERE SAL<(SELECT AVG(SAL) FROM EMP WHERE JOB=E.JOB GROUP BY JOB);

-- 26 사원 테이블에서 적어도 한명 이상으로부터 보고를 받을 수 있는 사원을 업무,이름,사원번호,부서번호를 출력(단, 부서번호 순으로 오름차순 정렬)
SELECT JOB, ENAME, EMPNO, DEPTNO FROM EMP
    WHERE EMPNO IN (SELECT DISTINCT MGR FROM EMP WHERE MGR IS NOT NULL)
    ORDER BY DEPTNO DESC;

-- 27. 사원 테이블에서 말단 사원의 사원번호,이름,업무,부서번호를 출력하는 SELECT문을 작성하시오.
SELECT EMPNO, ENAME, JOB, DEPTNO FROM EMP E
    WHERE NOT EXISTS (SELECT MGR FROM EMP WHERE E.EMPNO=MGR);
SELECT M.EMPNO, M.ENAME, M.JOB, M.DEPTNO FROM EMP W, EMP M
    WHERE W.MGR(+)=M.EMPNO AND W.EMPNO IS NULL;